var fs = require('fs');
var PNG = require('pngjs').PNG;

var png;
var width=800, height=600;

function R(n) { return Math.floor(n*Math.random()); }

function fill(x,y,color){
	var idx = (width * y + x) << 2;
	png.data[idx] = color[0];
	png.data[idx+1] = color[1];
	png.data[idx+2] = color[2];
	png.data[idx+3] = 0xFF;
}

function line(x0, y0, x1, y1, color){
   var dx = Math.abs(x1-x0);
   var dy = Math.abs(y1-y0);
   if (x0 < x1) sx = 1; else sx = -1;
   if (y0 < y1) sy = 1; else sy = -1;
   var err = dx-dy;
 
   while(true){
		fill(x0,y0,color)
		if (x0 == x1 && y0 == y1) break;
		var e2 = 2*err;
		if (e2 > -dy) { 
			err = err - dy;
			x0 = x0 + sx;
		}
		if (x0 == x1 && y0 == y1) {
			fill(x0,y0,color);
			break;
		}
		if (e2 < dx) { 
			err = err + dx;
			y0 = y0 + sy;
		}
   }
}


function plot_array(filename,array,options){	//options:{width,height,show_x_axis,show_y_axis,/*many:*/first,last,max,min,from_plot_many}	//first, last, max, min and from_plot_many are internal, for use with plot_array_many
	if (!options) options={};
	if (options.width) width=options.width;
	if (options.height) height=options.height;
	if (!options.color) options.color = [0,0,0];
	if (!options.from_plot_many || options.first){
		png = new PNG({filterType: -1,  width: width,  height: height});
		for (var y = 0; y < height; y++) {
			for (var x = 0; x < width; x++) {
				var idx = (width * y + x) << 2;
				png.data[idx] = 0xFF;
				png.data[idx+1] = 0xFF;
				png.data[idx+2] = 0xFF;
				png.data[idx+3] = 0xFF;
			}
		}
	}
	var max,min;
	if (!options.from_plot_many){
		max = -1/0;
		min = 1/0;
		array.forEach(function (v) {if(v>max) max=v; if(v<min) min=v;});
	} else {
		max = options.max;
		min = options.min;
	}
	var lastx=0;; var lasty=0;
	if (!options.from_plot_many || options.first){	//no need to draw it repeatedly
		if (options.show_x_axis){
			var y0 = height - Math.floor(((0-min)/(max-min))*height) -1;
			line(0,y0,width,y0,[0,0,0]);
		}
		if (options.show_y_axis){
			var x0 = Math.floor((0-min_x)*width/(max_x-min_x));
			line(x0,0,x0,height,[0,0,0]);
		}
	}
	for (var i=0;i<array.length;i++){
		var value = array[i];
		var x = Math.floor(i*width/(array.length-1))+1;
		var y = height - Math.floor(((value-min)/(max-min))*height) -1;
		if (lastx && lasty){
			line(lastx,lasty,x,y,options.color);
		}
		lastx=x;lasty=y;lastcolor=options.color;
	}
	if (!options.from_plot_many || options.last)
		png.pack().pipe(fs.createWriteStream(filename));
}

function plot_array_many(filename,options){	//e.g. plot_array_many(filename,options,[3,2,5,11],[9,0,1,4],...);
	if (!options) options={};
	options.first = true;
	options.from_plot_many = true;
	options.min=1/0;
	options.max=-1/0;
	for (var i = 2;i<arguments.length;i++)
		arguments[i].forEach(function (v) {if(v>options.max) options.max=v; if(v<options.min) options.min=v;});
	for (var j = 2;j<arguments.length;j++){
		options.color = [R(128),R(128),R(128)];	//dark colors
		if (j==arguments.length-1)
			options.last = true;
		plot_array(filename,arguments[j],options);
		if (options.first)
			options.first=false;
	}
}

function plot_callback(filename,callback,min_x,max_x,options){	//options:{width,height,show_x_axis,show_y_axis}
	if (!options) options={};
	if (options.width) width=options.width;
	if (options.height) height=options.height;
	if (!options.color) options.color = [0,0,0];
	/*if(!min_x) min_x=0;
	if(!max_x) max_x=width;*/
	if (!options.from_plot_many || options.first){
		png = new PNG({filterType: -1,  width: width,  height: height});
		for (var y = 0; y < height; y++) {
			for (var x = 0; x < width; x++) {
				var idx = (width * y + x) << 2;
				png.data[idx] = 0xFF;
				png.data[idx+1] = 0xFF;
				png.data[idx+2] = 0xFF;
				png.data[idx+3] = 0xFF;
			}
		}
	}
	var max,min;
	var inc = (max_x-min_x)*5/width;
	if (!options.from_plot_many){
		max = -1/0;
		min = 1/0;
		for (var i=min_x;i<max_x;i+=inc){ var r = callback(i); if (r>max) max=r; if(r<min) min=r; }
	} else {
		max = options.max;
		min = options.min;
	}
	var length = Math.floor((max_x-min_x)/inc);	//width/5?
	var lastx=0,lasty=0;
	if (!options.from_plot_many || options.first){
		if (options.show_x_axis){
			var y0 = height - Math.floor(((0-min)/(max-min))*height) -1;
			line(0,y0,width,y0);
		}
		if (options.show_y_axis){
			var x0 = Math.floor((0-min_x)*width/(max_x-min_x));
			line(x0,0,x0,height);
		}
	}
	for (var i=min_x;i<max_x;i+=inc){
		var value = callback(i);
		var x = Math.floor((i-min_x)*width/(max_x-min_x));
		var y = height - Math.floor(((value-min)/(max-min))*height) -1;
		if (lastx && lasty){
			line(lastx,lasty,x,y,options.color);
		}
		lastx=x;lasty=y;
	}
	if (!options.from_plot_many || options.last)
		png.pack().pipe(fs.createWriteStream(filename));
}

function plot_callback_many(filename,options){	//e.g. plot_callback_many(filename,options,[callback,min,max],[callback,min,max])
	if (!options) options={};
	options.first = true;
	options.from_plot_many = true;
	options.min=1/0;
	options.max=-1/0;
	for (var i = 2;i<arguments.length;i++){
		var callback = arguments[i][0];
		var min_x = arguments[i][1];
		var max_x = arguments[i][2];
		var inc = (max_x-min_x)*5/(options.width||width);
		for (var i=min_x;i<max_x;i+=inc){ var r = callback(i); if (r>options.max) options.max=r; if(r<options.min) options.min=r; }
	}
	for (var j = 2;j<arguments.length;j++){
		options.color = [R(128),R(128),R(128)];	//dark colors
		if (j==arguments.length-1)
			options.last = true;
		plot_callback(filename,arguments[j][0],arguments[j][1],arguments[j][2],options);
		if (options.first)
			options.first=false;
	}
}

exports.plot_array = plot_array;
exports.plot_array_many = plot_array_many;
exports.plot_callback = plot_callback;
exports.plot_callback_many = plot_callback_many;